/*
 * AuthenticatePanelView.java
 *
 * Created on 11 mai 2009, 18:20:34
 */

package fr.xlim.ssd.opalgui.view.authenticate;

import fr.xlim.ssd.opal.library.SCKey;
import fr.xlim.ssd.opal.library.SecLevel;
import fr.xlim.ssd.opal.library.params.CardConfigNotFoundException;
import fr.xlim.ssd.opal.library.utilities.Conversion;
import fr.xlim.ssd.opalgui.controller.authentication.AuthenticationController;
import fr.xlim.ssd.opalgui.model.authenticate.AuthenticationModel;
import fr.xlim.ssd.opalgui.model.authenticate.AuthenticationProfilChangedEvent;
import fr.xlim.ssd.opalgui.model.authenticate.AuthenticationProfilListener;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * This class extends a JPanel and defines the authentification view. It
 * displays options for the authentication part.
 * @author Pequegnot David, Rispal Julie
 */
public class AuthenticatePanelView extends javax.swing.JPanel
        implements AuthenticationProfilListener {
    private AuthenticationModel      authenticationModel      = null ;
    private AuthenticationController authenticationController = null ;

    /** Creates new form AuthenticatePanelView */
    public AuthenticatePanelView( 
            AuthenticationController authenticationController,
            AuthenticationModel authenticationModel ) {
        try {
            this.authenticationModel = authenticationModel ;
            this.authenticationController = authenticationController ;
            initComponents();
            displayProfil();
        } catch (CardConfigNotFoundException ex) {
            Logger.getLogger(AuthenticatePanelView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        securityLevelButtonGroup = new javax.swing.ButtonGroup();
        profileSelectionPanel = new javax.swing.JPanel();
        profileSelectionComboBox = new javax.swing.JComboBox();
        addProfileButton = new javax.swing.JButton();
        deleteProfileButton = new javax.swing.JButton();
        modifyProfileButton = new javax.swing.JButton();
        viewProfileDetailsButton = new javax.swing.JButton();
        keyConfigurationPanel = new javax.swing.JPanel();
        keysetLabel = new javax.swing.JLabel();
        keysetConfigurationPanel = new javax.swing.JPanel();
        keyConfigurationScrollPane = new javax.swing.JScrollPane();
        keyConfigurationTextArea = new javax.swing.JTextArea();
        keysetValueTextField = new javax.swing.JTextField();
        scpPanel = new javax.swing.JPanel();
        protocolLabel = new javax.swing.JLabel();
        securityLevelPanel = new javax.swing.JPanel();
        noSecureRadio = new javax.swing.JRadioButton();
        c_macRadio = new javax.swing.JRadioButton();
        c_decAndC_MACRadio = new javax.swing.JRadioButton();
        r_macRadio = new javax.swing.JRadioButton();
        c_macAndR_MACRadio = new javax.swing.JRadioButton();
        c_decAndC_MACAndR_MACRadio = new javax.swing.JRadioButton();
        protocolTextFieldValue = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setMaximumSize(new java.awt.Dimension(500, 32767));
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(fr.xlim.ssd.opalgui.OpalguiApp.class).getContext().getResourceMap(AuthenticatePanelView.class);
        profileSelectionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("profileSelectionPanel.border.title"))); // NOI18N
        profileSelectionPanel.setName("profileSelectionPanel"); // NOI18N

        profileSelectionComboBox.setName("profileSelectionComboBox"); // NOI18N
        profileSelectionComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                profileSelectionComboBoxActionPerformed(evt);
            }
        });

        addProfileButton.setText(resourceMap.getString("addProfileButton.text")); // NOI18N
        addProfileButton.setName("addProfileButton"); // NOI18N
        addProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addProfileButtonActionPerformed(evt);
            }
        });

        deleteProfileButton.setText(resourceMap.getString("deleteProfileButton.text")); // NOI18N
        deleteProfileButton.setName("deleteProfileButton"); // NOI18N

        modifyProfileButton.setText(resourceMap.getString("modifyProfileButton.text")); // NOI18N
        modifyProfileButton.setName("modifyProfileButton"); // NOI18N
        modifyProfileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyProfileButtonActionPerformed(evt);
            }
        });

        viewProfileDetailsButton.setText(resourceMap.getString("viewProfileDetailsButton.text")); // NOI18N
        viewProfileDetailsButton.setName("viewProfileDetailsButton"); // NOI18N

        javax.swing.GroupLayout profileSelectionPanelLayout = new javax.swing.GroupLayout(profileSelectionPanel);
        profileSelectionPanel.setLayout(profileSelectionPanelLayout);
        profileSelectionPanelLayout.setHorizontalGroup(
            profileSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profileSelectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(profileSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(profileSelectionComboBox, 0, 497, Short.MAX_VALUE)
                    .addGroup(profileSelectionPanelLayout.createSequentialGroup()
                        .addComponent(addProfileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteProfileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(modifyProfileButton)
                        .addGap(18, 18, 18)
                        .addComponent(viewProfileDetailsButton)))
                .addContainerGap())
        );
        profileSelectionPanelLayout.setVerticalGroup(
            profileSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(profileSelectionPanelLayout.createSequentialGroup()
                .addComponent(profileSelectionComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(profileSelectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addProfileButton)
                    .addComponent(deleteProfileButton)
                    .addComponent(modifyProfileButton)
                    .addComponent(viewProfileDetailsButton)))
        );

        keyConfigurationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("keyConfigurationPanel.border.title"))); // NOI18N
        keyConfigurationPanel.setName("keyConfigurationPanel"); // NOI18N

        keysetLabel.setText(resourceMap.getString("keysetLabel.text")); // NOI18N
        keysetLabel.setName("keysetLabel"); // NOI18N

        keysetConfigurationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("keysetConfigurationPanel.border.title"))); // NOI18N
        keysetConfigurationPanel.setName("keysetConfigurationPanel"); // NOI18N

        keyConfigurationScrollPane.setName("keyConfigurationScrollPane"); // NOI18N

        keyConfigurationTextArea.setColumns(20);
        keyConfigurationTextArea.setEditable(false);
        keyConfigurationTextArea.setRows(12);
        keyConfigurationTextArea.setName("keyConfigurationTextArea"); // NOI18N
        keyConfigurationScrollPane.setViewportView(keyConfigurationTextArea);

        javax.swing.GroupLayout keysetConfigurationPanelLayout = new javax.swing.GroupLayout(keysetConfigurationPanel);
        keysetConfigurationPanel.setLayout(keysetConfigurationPanelLayout);
        keysetConfigurationPanelLayout.setHorizontalGroup(
            keysetConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(keyConfigurationScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 485, Short.MAX_VALUE)
        );
        keysetConfigurationPanelLayout.setVerticalGroup(
            keysetConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(keyConfigurationScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        keysetValueTextField.setEditable(false);
        keysetValueTextField.setText(resourceMap.getString("keysetValueTextField.text")); // NOI18N
        keysetValueTextField.setName("keysetValueTextField"); // NOI18N

        javax.swing.GroupLayout keyConfigurationPanelLayout = new javax.swing.GroupLayout(keyConfigurationPanel);
        keyConfigurationPanel.setLayout(keyConfigurationPanelLayout);
        keyConfigurationPanelLayout.setHorizontalGroup(
            keyConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyConfigurationPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(keyConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(keysetConfigurationPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(keyConfigurationPanelLayout.createSequentialGroup()
                        .addComponent(keysetLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(keysetValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        keyConfigurationPanelLayout.setVerticalGroup(
            keyConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(keyConfigurationPanelLayout.createSequentialGroup()
                .addGroup(keyConfigurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(keysetLabel)
                    .addComponent(keysetValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(keysetConfigurationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        scpPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("scpPanel.border.title"))); // NOI18N
        scpPanel.setName("scpPanel"); // NOI18N

        protocolLabel.setText(resourceMap.getString("protocolLabel.text")); // NOI18N
        protocolLabel.setName("protocolLabel"); // NOI18N

        securityLevelPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("securityLevelPanel.border.title"))); // NOI18N
        securityLevelPanel.setName("securityLevelPanel"); // NOI18N

        securityLevelButtonGroup.add(noSecureRadio);
        noSecureRadio.setText(resourceMap.getString("noSecureRadio.text")); // NOI18N
        noSecureRadio.setName("noSecureRadio"); // NOI18N

        securityLevelButtonGroup.add(c_macRadio);
        c_macRadio.setText(resourceMap.getString("c_macRadio.text")); // NOI18N
        c_macRadio.setName("c_macRadio"); // NOI18N

        securityLevelButtonGroup.add(c_decAndC_MACRadio);
        c_decAndC_MACRadio.setText(resourceMap.getString("c_decAndC_MACRadio.text")); // NOI18N
        c_decAndC_MACRadio.setName("c_decAndC_MACRadio"); // NOI18N

        securityLevelButtonGroup.add(r_macRadio);
        r_macRadio.setText(resourceMap.getString("r_macRadio.text")); // NOI18N
        r_macRadio.setName("r_macRadio"); // NOI18N

        securityLevelButtonGroup.add(c_macAndR_MACRadio);
        c_macAndR_MACRadio.setText(resourceMap.getString("c_macAndR_MACRadio.text")); // NOI18N
        c_macAndR_MACRadio.setName("c_macAndR_MACRadio"); // NOI18N

        securityLevelButtonGroup.add(c_decAndC_MACAndR_MACRadio);
        c_decAndC_MACAndR_MACRadio.setText(resourceMap.getString("c_decAndC_MACAndR_MACRadio.text")); // NOI18N
        c_decAndC_MACAndR_MACRadio.setName("c_decAndC_MACAndR_MACRadio"); // NOI18N

        javax.swing.GroupLayout securityLevelPanelLayout = new javax.swing.GroupLayout(securityLevelPanel);
        securityLevelPanel.setLayout(securityLevelPanelLayout);
        securityLevelPanelLayout.setHorizontalGroup(
            securityLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(securityLevelPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(securityLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noSecureRadio)
                    .addComponent(c_macRadio)
                    .addComponent(c_decAndC_MACRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(securityLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(c_decAndC_MACAndR_MACRadio)
                    .addComponent(c_macAndR_MACRadio)
                    .addComponent(r_macRadio))
                .addContainerGap(113, Short.MAX_VALUE))
        );
        securityLevelPanelLayout.setVerticalGroup(
            securityLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(securityLevelPanelLayout.createSequentialGroup()
                .addGroup(securityLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(noSecureRadio)
                    .addComponent(r_macRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(securityLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(c_macRadio)
                    .addComponent(c_macAndR_MACRadio))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(securityLevelPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(c_decAndC_MACRadio)
                    .addComponent(c_decAndC_MACAndR_MACRadio)))
        );

        protocolTextFieldValue.setEditable(false);
        protocolTextFieldValue.setText(resourceMap.getString("protocolTextFieldValue.text")); // NOI18N
        protocolTextFieldValue.setName("protocolTextFieldValue"); // NOI18N

        javax.swing.GroupLayout scpPanelLayout = new javax.swing.GroupLayout(scpPanel);
        scpPanel.setLayout(scpPanelLayout);
        scpPanelLayout.setHorizontalGroup(
            scpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scpPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(scpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(scpPanelLayout.createSequentialGroup()
                        .addComponent(protocolLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(protocolTextFieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(securityLevelPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        scpPanelLayout.setVerticalGroup(
            scpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(scpPanelLayout.createSequentialGroup()
                .addGroup(scpPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(protocolLabel)
                    .addComponent(protocolTextFieldValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(securityLevelPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 549, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addContainerGap(413, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(profileSelectionPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scpPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(keyConfigurationPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(profileSelectionPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scpPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(keyConfigurationPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void addProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addProfileButtonActionPerformed
        ProfileManagement test = new ProfileManagement(null, true, this.authenticationController) ;
        test.setVisible(true);
}//GEN-LAST:event_addProfileButtonActionPerformed

    private void profileSelectionComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_profileSelectionComboBoxActionPerformed
        authenticationController.notifyProfileSelectedChanged(
                (String) profileSelectionComboBox.getSelectedItem());
    }//GEN-LAST:event_profileSelectionComboBoxActionPerformed

    private void modifyProfileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyProfileButtonActionPerformed
        ProfileManagement test = new ProfileManagement(null, true, this.authenticationController, this.authenticationModel) ;
        test.setVisible( true );
    }//GEN-LAST:event_modifyProfileButtonActionPerformed

    /**
     * Sets visibility and enable properties for security level options in
     * the view.
     * @param scpMode The SCPMode value. Values are 0 to SCP01, 1 to SCP02
     * et 2 to SCP10.
     * @todo Uses of the enum type SCPMode (better than int).
     */
    private void setSCPVisibility( int scpMode, SecLevel secLevel ) {
        switch ( scpMode ) {
            case 0 :
                if ( (secLevel == SecLevel.R_MAC) ||
                     (secLevel == SecLevel.C_MAC_AND_R_MAC) ||
                     (secLevel == SecLevel.C_ENC_AND_C_MAC_AND_R_MAC) ) {
                    throw new UnsupportedOperationException (
                            "SCP01 can not have these Security Levels") ;
                }
                noSecureRadio.setEnabled( true );
                noSecureRadio.setVisible( true );
                c_macRadio.setEnabled( true );
                c_macRadio.setVisible( true );
                c_decAndC_MACRadio.setEnabled( true );
                c_decAndC_MACRadio.setVisible( true );
                r_macRadio.setEnabled( false );
                r_macRadio.setVisible( false );
                c_macAndR_MACRadio.setEnabled( false );
                c_macAndR_MACRadio.setVisible( false );
                c_decAndC_MACAndR_MACRadio.setEnabled( false );
                c_decAndC_MACAndR_MACRadio.setVisible( false );
                protocolTextFieldValue.setText( "Secure Channel Protocol 01");
                break ;
            case 1 :
                noSecureRadio.setEnabled( false );
                noSecureRadio.setVisible( true );
                c_macRadio.setEnabled( false );
                c_macRadio.setVisible( true );
                c_decAndC_MACRadio.setEnabled( false );
                c_decAndC_MACRadio.setVisible( true );
                r_macRadio.setEnabled( false );
                r_macRadio.setVisible( true );
                c_macAndR_MACRadio.setEnabled( false );
                c_macAndR_MACRadio.setVisible( true );
                c_decAndC_MACAndR_MACRadio.setEnabled( false );
                c_decAndC_MACAndR_MACRadio.setVisible( true );
                protocolTextFieldValue.setText( "Secure Channel Protocol 02");
                break ;
            case 2 :
                noSecureRadio.setEnabled( false );
                noSecureRadio.setVisible( true );
                c_macRadio.setEnabled( false );
                c_macRadio.setVisible( true );
                c_decAndC_MACRadio.setEnabled( false );
                c_decAndC_MACRadio.setVisible( true );
                r_macRadio.setEnabled( false );
                r_macRadio.setVisible( true );
                c_macAndR_MACRadio.setEnabled( false );
                c_macAndR_MACRadio.setVisible( true );
                c_decAndC_MACAndR_MACRadio.setEnabled( false );
                c_decAndC_MACAndR_MACRadio.setVisible( true );
                protocolTextFieldValue.setText( "Secure Channel Protocol 10");
                break ;
            default: throw new UnsupportedOperationException( "Not implemented" ) ;
        }
        switch ( secLevel ) {
            case NO_SECURITY_LEVEL : noSecureRadio.setSelected( true );
            break ;
            case C_MAC : c_macRadio.setSelected( true );
            break ;
            case C_ENC_AND_MAC : c_decAndC_MACRadio.setSelected( true );
            break ;
            case R_MAC : r_macRadio.setSelected( true );
            break ;
            case C_MAC_AND_R_MAC : c_macAndR_MACRadio.setSelected( true );
            break ;
            case C_ENC_AND_C_MAC_AND_R_MAC : c_decAndC_MACAndR_MACRadio.setSelected( true );
            break ;
            default: throw new UnsupportedOperationException( "Unsupporter operation") ;
        }
    }

    /**
     * Modify the current authentication display when an event (profil
     * selectionned changed) is listened.
     * @param evt
     */
    @Override
    public void profilChanged( AuthenticationProfilChangedEvent evt ) {
        try {
            displayProfil();
        } catch (CardConfigNotFoundException ex) {
            Logger.getLogger(AuthenticatePanelView.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    /**
     * Sets the display with the current profil (defined by the model).
     * @throws fr.xlim.ssd.opal.library.params.CardConfigNotFoundException
     */
    private void displayProfil( ) throws CardConfigNotFoundException {
        fillProfileList();

        profileSelectionComboBox.setSelectedIndex(
                this.authenticationModel.getSelectedCardIndex() ) ;
        
        // Key configuration
        keysetValueTextField.setText(
                Integer.toString(this.authenticationModel.getSelectedCard().getSCKeys()[0].getSetVersion() & 0xFF));


        // Security Level
        switch ( this.authenticationModel.getSelectedCard().getScpMode() ) {
            case SCP_01_05 :
                setSCPVisibility( 0, SecLevel.C_MAC );
                break ;
            case SCP_01_15 :
                setSCPVisibility( 0, SecLevel.C_ENC_AND_MAC );
                // TODO : SCP02...
            default :
                // TODO what kind of information can we display ?
                setSCPVisibility( 0, SecLevel.C_MAC );
        }

        SCKey [] keys = authenticationModel.getSelectedCard().getSCKeys() ;
        keyConfigurationTextArea.setText( "Mode : " );
        switch ( keys[0].getType() ) {
            case DES_ECB :
                keyConfigurationTextArea.append(
                        "Triple DES in ECB Mode\n" ) ;
                keyConfigurationTextArea.append(
                        "==Secure Channel Encryption Key (S-ENC)==\n" ) ;
                keyConfigurationTextArea.append( "Index : ") ;
                keyConfigurationTextArea.append(
                        Integer.toString(keys[0].getId() & 0xFF) + "\n" ) ;
                keyConfigurationTextArea.append(
                        "Value : " +
                        Conversion.arrayToHex( keys[0].getData() ) + 
                        "\n\n" ) ;
                keyConfigurationTextArea.append(
                        "==Secure Channel Message Authentification Code Key (S-MAC)==\n" ) ;
                keyConfigurationTextArea.append( "Index : ") ;
                keyConfigurationTextArea.append(
                        Integer.toString(keys[1].getId() & 0xFF) + "\n" ) ;
                keyConfigurationTextArea.append(
                        "Value : " +
                        Conversion.arrayToHex( keys[1].getData() ) + 
                        "\n\n" ) ;
                keyConfigurationTextArea.append(
                        "==Data Encryption Key (DEK)==\n" ) ;
                keyConfigurationTextArea.append( "Index : ") ;
                keyConfigurationTextArea.append(
                        Integer.toString(keys[2].getId() & 0xFF) + "\n" ) ;
                keyConfigurationTextArea.append(
                        "Value : " +
                        Conversion.arrayToHex( keys[2].getData() ) ) ;
                break ;
            case MOTHER_KEY :
                keyConfigurationTextArea.append( "Master Key\n" ) ;
                keyConfigurationTextArea.append(
                        "Value : " +
                        Conversion.arrayToHex( keys[0].getData() ) );
        }
    }

    /**
     * Fill the profile list.
     */
    private void fillProfileList( ) {
        ArrayList<String> cardsName =
                this.authenticationModel.getCardsName() ;
        profileSelectionComboBox.removeAllItems();
        for ( int ind = 0 ; ind < cardsName.size( ) ; ++ind ) {
            profileSelectionComboBox.addItem( cardsName.get( ind ) );
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addProfileButton;
    private javax.swing.JRadioButton c_decAndC_MACAndR_MACRadio;
    private javax.swing.JRadioButton c_decAndC_MACRadio;
    private javax.swing.JRadioButton c_macAndR_MACRadio;
    private javax.swing.JRadioButton c_macRadio;
    private javax.swing.JButton deleteProfileButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel keyConfigurationPanel;
    private javax.swing.JScrollPane keyConfigurationScrollPane;
    private javax.swing.JTextArea keyConfigurationTextArea;
    private javax.swing.JPanel keysetConfigurationPanel;
    private javax.swing.JLabel keysetLabel;
    private javax.swing.JTextField keysetValueTextField;
    private javax.swing.JButton modifyProfileButton;
    private javax.swing.JRadioButton noSecureRadio;
    private javax.swing.JComboBox profileSelectionComboBox;
    private javax.swing.JPanel profileSelectionPanel;
    private javax.swing.JLabel protocolLabel;
    private javax.swing.JTextField protocolTextFieldValue;
    private javax.swing.JRadioButton r_macRadio;
    private javax.swing.JPanel scpPanel;
    private javax.swing.ButtonGroup securityLevelButtonGroup;
    private javax.swing.JPanel securityLevelPanel;
    private javax.swing.JButton viewProfileDetailsButton;
    // End of variables declaration//GEN-END:variables

}
