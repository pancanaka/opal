/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Terminal.java
 *
 * Created on 18 mai 2009, 17:21:44
 */

package fr.xlim.ssd.opalgui.view;

import fr.xlim.ssd.opal.library.utilities.Conversion;
import fr.xlim.ssd.opalgui.io.proceed.ProceedErrorEvent;
import fr.xlim.ssd.opalgui.io.proceed.ProceedEvent;
import fr.xlim.ssd.opalgui.io.proceed.ProceedListener;
import java.awt.Color;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author Fox
 */
public class Terminal extends javax.swing.JFrame implements ProceedListener {

    private int pos1 = 0 ;
    private int pos2 = 0 ;

    private Style default1 ;
    private Style title1 ;
    private Style italic1 ;

    private Style default2 ;
    private Style title2 ;
    private Style rightValue2 ;
    private Style wrongValue2 ;

    private StyledDocument doc1 ;
    private StyledDocument doc2 ;

    /** Creates new form Terminal */
    public Terminal() {
        initComponents();

        // getting default styles from JTextPanes.
        this.default1 = jTextPane1.getStyle("default");
        this.default2 = jTextPane2.getStyle("default");

        // Adding new styles
        this.title1 = jTextPane1.addStyle("title1", default1);
            StyleConstants.setBold(title1, true);
            StyleConstants.setFontSize(title1, 20);
            StyleConstants.setForeground(title1, new Color(39, 73, 165)); // Blue
        this.italic1 = jTextPane1.addStyle("italic1", default1);
            StyleConstants.setItalic(italic1, true);

        this.title2 = jTextPane2.addStyle("title2", default2);
            StyleConstants.setBold(title2, true);
            StyleConstants.setFontSize(title2, 20);
            StyleConstants.setForeground(title2, new Color(39,73,165)); // Blue
        this.rightValue2 = jTextPane2.addStyle("rightValue2", default2) ;
            StyleConstants.setBackground(rightValue2, Color.GREEN);
        this.wrongValue2 = jTextPane2.addStyle("wrongValue2", default2) ;
            StyleConstants.setBackground(wrongValue2, Color.RED);

        // getting documents
        this.doc1 = jTextPane1.getStyledDocument() ;
        this.doc2 = jTextPane2.getStyledDocument() ;

        // We will show the second tab by default.
        jTabbedPane1.setSelectedIndex(1);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextPane2 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setName("Form"); // NOI18N

        jTabbedPane1.setName("jTabbedPane1"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jTextPane1.setName("jTextPane1"); // NOI18N
        jScrollPane1.setViewportView(jTextPane1);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(fr.xlim.ssd.opalgui.OpalguiApp.class).getContext().getResourceMap(Terminal.class);
        jTabbedPane1.addTab(resourceMap.getString("jScrollPane1.TabConstraints.tabTitle"), jScrollPane1); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        jTextPane2.setName("jTextPane2"); // NOI18N
        jScrollPane2.setViewportView(jTextPane2);

        jTabbedPane1.addTab(resourceMap.getString("jScrollPane2.TabConstraints.tabTitle"), jScrollPane2); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Terminal().setVisible(true);
            }
        });
    }

    @Override
    public void onProceed(ProceedEvent event) {
        String s1, s2, s3 ;
        switch ( event.getModule() ) {
            case SELECT :
                // Response APDU terminal
                s1 = "Select method\n" ;
                s2 = "Response : " + Conversion.arrayToHex(event.getResponse().getBytes()) + "\n";
                s3 = event.getResponse().toString() + "\n\n";
                try {
                    doc1.insertString(pos1, s1, title1);
                    pos1 += s1.length() ;
                    doc1.insertString(pos1, s2, default1);
                    pos1 += s2.length() ;
                    doc1.insertString(pos1, s3, italic1);
                    pos1 += s3.length() ;
                } catch (BadLocationException ex) {
                    Logger.getLogger(Terminal.class.getName()).log(Level.SEVERE, null, ex);
                }

                // Trace Terminal
                s1 = "Select method\n" ;
                s2 = event.getResponse().toString() + "\n";
                s3 = "SW = 0x" + Integer.toHexString( event.getResponse().getSW() ) +
                        "\n\n";
                try {
                    doc2.insertString(pos2, s1, title1);
                    pos2 += s1.length() ;
                    doc2.insertString(pos2, s2, default1);
                    pos2 += s2.length() ;
                    if ( event.getResponse().getSW() == 0x9000 ) {
                        doc2.insertString(pos2, s3, rightValue2);
                        pos2 += s3.length() ;
                    } else {
                        doc2.insertString(pos2, s3, wrongValue2);
                        pos2 += s3.length() ;
                    }
                } catch (BadLocationException ex) {
                    Logger.getLogger(Terminal.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case INITIALIZE_UPDATE :
                // Response APDU terminal
                s1 = "Initialize Update method\n" ;
                s2 = "Response : " + Conversion.arrayToHex(event.getResponse().getBytes()) + "\n";
                s3 = event.getResponse().toString() + "\n\n";
                try {
                    doc1.insertString(pos1, s1, title1);
                    pos1 += s1.length() ;
                    doc1.insertString(pos1, s2, default1);
                    pos1 += s2.length() ;
                    doc1.insertString(pos1, s3, italic1);
                    pos1 += s3.length() ;
                } catch (BadLocationException ex) {
                    Logger.getLogger(Terminal.class.getName()).log(Level.SEVERE, null, ex);
                }

                // Trace Terminal
                s1 = "Initialize Update method\n" ;
                s2 = event.getResponse().toString() + "\n";
                s3 = "SW = 0x" + Integer.toHexString( event.getResponse().getSW() ) +
                        "\n\n";
                try {
                    doc2.insertString(pos2, s1, title1);
                    pos2 += s1.length() ;
                    doc2.insertString(pos2, s2, default1);
                    pos2 += s2.length() ;
                    doc2.insertString(pos2, s3, rightValue2);
                    pos2 += s3.length() ;
                } catch (BadLocationException ex) {
                    Logger.getLogger(Terminal.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case EXTERNAL_AUTHENTICATE :
                // Response APDU terminal
                s1 = "External Authenticate method\n" ;
                s2 = "Response : " + Conversion.arrayToHex(event.getResponse().getBytes()) + "\n";
                s3 = event.getResponse().toString() + "\n\n";
                try {
                    doc1.insertString(pos1, s1, title1);
                    pos1 += s1.length() ;
                    doc1.insertString(pos1, s2, default1);
                    pos1 += s2.length() ;
                    doc1.insertString(pos1, s3, italic1);
                    pos1 += s3.length() ;
                } catch (BadLocationException ex) {
                    Logger.getLogger(Terminal.class.getName()).log(Level.SEVERE, null, ex);
                }

                // Trace Terminal
                s1 = "External Authenticate method\n" ;
                s2 = event.getResponse().toString() + "\n";
                s3 = "SW = 0x" + Integer.toHexString( event.getResponse().getSW() ) +
                        "\n\n";
                try {
                    doc2.insertString(pos2, s1, title1);
                    pos2 += s1.length() ;
                    doc2.insertString(pos2, s2, default1);
                    pos2 += s2.length() ;
                    doc2.insertString(pos2, s3, rightValue2);
                    pos2 += s3.length() ;
                } catch (BadLocationException ex) {
                    Logger.getLogger(Terminal.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
        }
    }

    @Override
    public void onProceedError( ProceedErrorEvent event ) {
        String s1, s2 ;
        switch ( event.getModule() ) {
            case SELECT:
                // Trace Terminal
                s1 = "Select method - Error\n" ;
                s2 = "Error : " + event.getMessage() + "\n\n";
                try {
                    doc1.insertString(pos1, s1, title1);
                    doc2.insertString(pos2, s1, title2);
                    pos2 += s1.length() ;
                    doc2.insertString(pos2, s2, wrongValue2);
                    pos2 += s2.length() ;
                } catch (BadLocationException ex) {
                    Logger.getLogger(Terminal.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case INITIALIZE_UPDATE:
                // Trace Terminal
                s1 = "Initialize Update method - Error\n" ;
                s2 = "Error : " + event.getMessage() + "\n\n";
                try {
                    doc2.insertString(pos2, s1, title2);
                    pos2 += s1.length() ;
                    doc2.insertString(pos2, s2, wrongValue2);
                    pos2 += s2.length() ;
                } catch (BadLocationException ex) {
                    Logger.getLogger(Terminal.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            case EXTERNAL_AUTHENTICATE:
                 // Trace Terminal
                s1 = "External Authenticate method - Error\n" ;
                s2 = "Error : " + event.getMessage() + "\n\n";
                try {
                    doc2.insertString(pos2, s1, title2);
                    pos2 += s1.length() ;
                    doc2.insertString(pos2, s2, wrongValue2);
                    pos2 += s2.length() ;
                } catch (BadLocationException ex) {
                    Logger.getLogger(Terminal.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JTextPane jTextPane2;
    // End of variables declaration//GEN-END:variables
}
