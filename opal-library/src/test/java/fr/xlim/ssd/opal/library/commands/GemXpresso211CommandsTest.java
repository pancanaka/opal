package fr.xlim.ssd.opal.library.commands;

import fr.xlim.ssd.opal.library.config.KeyType;
import fr.xlim.ssd.opal.library.config.SCGPKey;
import org.junit.Test;

import static org.junit.Assert.assertArrayEquals;

public class GemXpresso211CommandsTest {

    @Test
    public void testGenerateSessionKeys() {
        GemXpresso211Commands commands = new GemXpresso211Commands();

        byte[] encData = new byte[]{
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
                0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17
        };

        SCGPKey enc = new SCGPKey((byte) -1, (byte) -1, KeyType.DES_ECB, encData);

        byte[] macData = new byte[]{
                0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
        };

        SCGPKey mac = new SCGPKey((byte) -1, (byte) -1, KeyType.DES_ECB, macData);

        byte[] kekData = new byte[]{
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
                0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07
        };

        SCGPKey kek = new SCGPKey((byte) -1, (byte) -1, KeyType.DES_ECB, kekData);

        commands.derivationData = new byte[]{
                0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
                0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,};

        commands.generateSessionKeys(enc, mac, kek);

        byte[] expectedSessEnc = {
                0x2D, 0x2D, (byte) 0xCA, (byte) 0xCA, (byte) 0xCA, 0x2D, 0x2D, (byte) 0xCA,
                (byte) 0xCA, 0x2D, (byte) 0xCA, (byte) 0xCA, 0x2D, (byte) 0xCA, (byte) 0xCA, 0x2D,
                0x2D, 0x2D, (byte) 0xCA, (byte) 0xCA, (byte) 0xCA, 0x2D, 0x2D, (byte) 0xCA
        };

        byte[] expectedSessMac = {
                0x2D, (byte) 0xCA, 0x2D, (byte) 0xCA, 0x2D, 0x2D, 0x2D, 0x2D, (byte) 0xCA,
                (byte) 0xCA, (byte) 0xCA, 0x2D, 0x2D, 0x2D, 0x2D, (byte) 0xCA, 0x2D, (byte) 0xCA,
                0x2D, (byte) 0xCA, 0x2D, 0x2D, 0x2D, 0x2D
        };

        byte[] expectedSessKek = {
                0x2D, 0x2D, (byte) 0xCA, 0x2D, 0x2D, (byte) 0xCA, (byte) 0xCA, (byte) 0xCA, 0x2D,
                0x2D, (byte) 0xCA, (byte) 0xCA, (byte) 0xCA, 0x2D, (byte) 0xCA, (byte) 0xCA, 0x2D,
                0x2D, (byte) 0xCA, 0x2D, 0x2D, (byte) 0xCA, (byte) 0xCA, (byte) 0xCA
        };

        assertArrayEquals(expectedSessEnc, commands.sessEnc);
        assertArrayEquals(expectedSessMac, commands.sessMac);
        assertArrayEquals(expectedSessKek, commands.sessKek);
    }
}